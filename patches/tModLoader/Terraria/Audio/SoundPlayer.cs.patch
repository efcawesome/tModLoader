--- src/TerrariaNetCore/Terraria/Audio/SoundPlayer.cs
+++ src/tModLoader/Terraria/Audio/SoundPlayer.cs
@@ -2,24 +_,97 @@
 using Microsoft.Xna.Framework;
 using ReLogic.Utilities;
 
+#nullable enable
+
 namespace Terraria.Audio;
 
-public class SoundPlayer
+// Also see SoundPlayer.TML.cs
+public partial class SoundPlayer
 {
 	private readonly SlotVector<ActiveSound> _trackedSounds = new SlotVector<ActiveSound>(4096);
 
-	public SlotId Play(SoundStyle style, Vector2 position)
+	//TML: Position parameter made nullable, SoundUpdateCallback parameter merged in, with changed type.
+	public SlotId Play(in SoundStyle style, Vector2? position = null, SoundUpdateCallback? updateCallback = null)
 	{
+		/*
 		if (Main.dedServ || style == null || !style.IsTrackable)
+		*/
+		if (Main.dedServ)
 			return SlotId.Invalid;
 
+		/*
 		if (Vector2.DistanceSquared(Main.screenPosition + new Vector2(Main.screenWidth / 2, Main.screenHeight / 2), position) > 100000000f)
 			return SlotId.Invalid;
+		*/
+
+		if (position.HasValue && Vector2.DistanceSquared(Main.screenPosition + new Vector2(Main.screenWidth / 2, Main.screenHeight / 2), position.Value) > 100000000f)
+			return SlotId.Invalid;
+
+		// Handle PlayOnlyIfFocused
+		if (style.PlayOnlyIfFocused && !Main.hasFocus)
+			return SlotId.Invalid;
+
+		// If not on the main thread - queue a main thread action, and wait for it to complete
+		if (!Program.IsMainThread) {
+			var styleCopy = style;
+			return Main.RunOnMainThread(() => Play_Inner(styleCopy, position, updateCallback)).GetAwaiter().GetResult();
+		}
+
+		return Play_Inner(in style, position, updateCallback);
+	}
+
+	// The part that HAS to run on the main thread.
+	private SlotId Play_Inner(in SoundStyle style, Vector2? position, SoundUpdateCallback? updateCallback)
+	{
+		SoundStyle chosenStyle = style.WithSelectedVariant();
+
+		// Handle the MaxInstances & RestartIfPlaying properties
+		int maxInstances = chosenStyle.MaxInstances;
+
+		if (maxInstances > 0) {
+			int attempts = chosenStyle.LimitsArePerVariant ? chosenStyle.RerollAttempts + 1 : 1;
+			for (int attempt = 0; attempt < attempts; attempt++) {
+				bool tryAgain = false;
+				int instanceCount = 0;
+
+				foreach (var pair in _trackedSounds) {
+					var activeSound = pair.Value;
+
+					if (!activeSound.IsPlaying || !chosenStyle.IsTheSameAs(activeSound.Style) || ++instanceCount < maxInstances) {
+						continue;
+					}
+
+					if (attempt + 1 < attempts) {
+						tryAgain = true;
+						chosenStyle = style.WithSelectedVariant();
+						break;
+					}
+
+					switch (chosenStyle.SoundLimitBehavior) {
+						case SoundLimitBehavior.ReplaceOldest: //TODO: Make this actually true to its name -- replace the *oldest* sound.
+							activeSound.Sound?.Stop(true);
+							break;
+						default:
+							return SlotId.Invalid;
+					}
+				}
+
+				if (!tryAgain)
+					break;
+			}
+		}
+
+		// Handle 'UsesMusicPitch'.. This property is a weird solution for keeping vanilla's old instruments' behavior alive, and is currently internal.
+		if (chosenStyle.UsesMusicPitch) {
+			chosenStyle.Pitch += Main.musicPitch;
+		}
 
-		ActiveSound value = new ActiveSound(style, position);
+		ActiveSound value = new ActiveSound(chosenStyle, position, updateCallback);
 		return _trackedSounds.Add(value);
 	}
 
+	//TML: Merged into the above method.
+	/*
 	public SlotId PlayLooped(SoundStyle style, Vector2 position, ActiveSound.LoopedPlayCondition loopingCondition)
 	{
 		if (Main.dedServ || style == null || !style.IsTrackable)
@@ -29,14 +_,19 @@
 			return SlotId.Invalid;
 
 		ActiveSound value = new ActiveSound(style, position, loopingCondition);
+
 		return _trackedSounds.Add(value);
 	}
+	*/
 
 	public void Reload()
 	{
 		StopAll();
 	}
 
+	//TML: Merged into the above method.
+	/*
+	{
 	public SlotId Play(SoundStyle style)
 	{
 		if (Main.dedServ || style == null || !style.IsTrackable)
@@ -45,7 +_,13 @@
 		ActiveSound value = new ActiveSound(style);
 		return _trackedSounds.Add(value);
 	}
+	*/
 
+	//TML: Made internal, mods should use TryGetActiveSound
+	internal ActiveSound? GetActiveSound(SlotId id)
+		=> TryGetActiveSound(id, out var result) ? result : null;
+
+	/*
 	public ActiveSound GetActiveSound(SlotId id)
 	{
 		if (!_trackedSounds.Has(id))
@@ -53,6 +_,7 @@
 
 		return _trackedSounds[id];
 	}
+	*/
 
 	public void PauseAll()
 	{
@@ -61,6 +_,22 @@
 		}
 	}
 
+	public void PauseOrStopAll()
+	{
+		foreach (SlotVector<ActiveSound>.ItemPair item in (IEnumerable<SlotVector<ActiveSound>.ItemPair>)_trackedSounds) {
+			switch (item.Value.Style.PauseBehavior) {
+				case PauseBehavior.KeepPlaying:
+					break;
+				case PauseBehavior.PauseWithGame:
+					item.Value.Pause();
+					break;
+				case PauseBehavior.StopWhenGamePaused:
+					item.Value.Stop();
+					break;
+			}
+		}
+	}
+
 	public void ResumeAll()
 	{
 		foreach (SlotVector<ActiveSound>.ItemPair item in (IEnumerable<SlotVector<ActiveSound>.ItemPair>)_trackedSounds) {
@@ -82,7 +_,7 @@
 		foreach (SlotVector<ActiveSound>.ItemPair item in (IEnumerable<SlotVector<ActiveSound>.ItemPair>)_trackedSounds) {
 			try {
 				item.Value.Update();
-				if (!item.Value.IsPlaying)
+				if (!item.Value.IsPlayingOrPaused) // TML: Paused sounds now properly supported
 					_trackedSounds.Remove(item.Id);
 			}
 			catch {
@@ -91,7 +_,7 @@
 		}
 	}
 
-	public ActiveSound FindActiveSound(SoundStyle style)
+	public ActiveSound? FindActiveSound(in SoundStyle style)
 	{
 		foreach (SlotVector<ActiveSound>.ItemPair item in (IEnumerable<SlotVector<ActiveSound>.ItemPair>)_trackedSounds) {
 			if (item.Value.Style == style)
